let rec len = function
  | [] -> 0
  | _ :: xs -> 1 + len xs

let rec sub n = function
  | [] -> []
  | x :: xs ->
      if n == 0 
        then []
      else 
        x :: sub (n-1) xs

let rec same_number a1 a2 =  
  match a1 with
    | [] -> -1
    | x :: xs -> 
      (
       match a2 with
        | [] -> -1 
        | y :: ys ->
        if y == x then 
         same_number xs ys |> max x 
        else if y > x then
          same_number xs a2 
        else
          same_number a1 ys  
    )

let rec quicksort = function
  | [] -> []
  | x :: xs -> 
    let left_side = List.filter (fun y -> y < x) xs in
    let right_side = List.filter (fun y -> y > x) xs in 
    quicksort left_side @ [x] @ quicksort right_side

let to_list_of_int list = 
  List.map (fun x -> x |> Char.uppercase_ascii |> fun x -> (int_of_char x) - 64) list


let list_of_string s =
  let rec aux index acc =
    if index < 0 then
      acc
    else
      aux (index - 1) (s.[index] :: acc)
  in
  aux (String.length s - 1) []



let main () = 
  let compartments = Reader.file_reader "./lib/day3.txt" in
  let int_compartments = compartments |> list_of_string |> to_list_of_int |> quicksort in

